% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Plot.R
\name{plot_high_order_bezier}
\alias{plot_high_order_bezier}
\title{Plot an interactive high order bezier curve}
\usage{
plot_high_order_bezier(Points = NULL)
}
\arguments{
\item{Points}{The control points for a Bezier curve. The control points can be in the form of dataframe or matrix or an integer.
If not provided, this function will plot a 20-order Bezier curve with random control points.
If a dataframe is provided, it should have more than 5 rows and 2 columns and the column's name should be "x" and "y".
If a matrix is provided, it also should have more than 5 rows and 2 columns. The data in first column will be the x coordinates of control points and data in the second column will be the y coordinates of control ponints.
If an integer is provided, it will plot a Bezier curve at this order with random control points.}
}
\description{
This function will plot an interactive Bezier curve at more than 5 order. The blue points are the control points for this bezier curve, which can be dragged at will.
This high order Bezier curve is obtained by subdividing the original Bezier curve with De Casteljau's algorithm recursively. After the fixed iteration times, this function will use generated control points as the Bezier Curve.
The variable Iterate times controls how many times the De Casteljau's algorithm will be performed, which can be adjusted using the slider in the bottom of the plot.
}
\examples{
#Plot with 20 random control points
plot_high_order_bezier()

#Plot with a dataframe as control points
x = c(100, 200, 300, 400, 500, 900)
y = c(100, 400, 100, 400, 700, 300)
control_points = data.frame(x,y)
plot_high_order_bezier(control_points)

#Plot with a matrix as control points
x = c(100, 200, 300, 400, 500, 900)
y = c(100, 400, 100, 400, 700, 300)
control_points = matrix(c(x,y),length(x),2)
plot_high_order_bezier(control_points)

#Plot with an integer as the order of Bezier curve
plot_high_order_bezier(11)

}
